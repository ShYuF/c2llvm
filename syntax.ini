[开始符号]
PROGRAM

[产生式]
PROGRAM -> OUTER_STMT OUTER_SUB_PROGRAM | OUTER_STMT                          ; 程序的入口点
OUTER_SUB_PROGRAM -> OUTER_STMT OUTER_SUB_PROGRAM | OUTER_STMT                ; 外部子程序
OUTER_STMT -> HEADER_STMT | DEFINE_STMT | DECLARE_STMT | FUNCTION_STMT        ; 外部语句
INNER_SUB_PROGRAM -> INNER_STMT INNER_SUB_PROGRAM | INNER_STMT                ; 内部子程序
INNER_STMT -> IF_STMT | WHILE_STMT | FOR_STMT | ASSIGN_STMT | DECLARE_STMT |  ; 内部语句
              VALUE_ITEM semicolon | RETURN_STMT | continue semicolon |
              break semicolon
IF_STMT -> if lparen LINER_CODDITION rparen RESULT else RESULT |              ; 条件语句
           if lparen LINER_CODDITION rparen RESULT
RESULT -> BLOCK | INNER_STMT                                                  ; 条件或循环的结果块
DEFINE_STMT -> define identifier VALUE_ITEM                                   ; 宏定义语句
WHILE_STMT -> while lparen LINER_CODDITION rparen RESULT                      ; while 循环语句
FOR_STMT -> for lparen FOR_INIT FOR_CONDITION FOR_ASSIGN rparen RESULT |      ; for 循环语句
            for lparen FOR_INIT FOR_CONDITION rparen RESULT
FOR_INIT -> ASSIGN_STMT semicolon | DECLARE_STMT semicolon | semicolon        ; for 循环初始化
FOR_CONDITION -> LINER_CODDITION semicolon | semicolon                        ; for 循环条件
FOR_ASSIGN -> identifier assign VALUE_ITEM |                                  ; for 循环赋值
              ARRAY_ITEM assign VALUE_ITEM
ASSIGN_STMT -> identifier assign VALUE_ITEM semicolon |                       ; 赋值语句
               ARRAY_ITEM assign VALUE_ITEM semicolon
DECLARE_STMT -> TYPE identifier semicolon |                                   ; 声明语句
               TYPE identifier assign VALUE_ITEM semicolon |
               TYPE DEC_ARRAY_ITEM semicolon |
               TYPE DEC_ARRAY_ITEM assign lbrace GROUP_ITEM rbrace
GROUP_ITEM -> VALUE_ITEM comma GROUP_ITEM | VALUE_ITEM                        ; 组项
EXPRESSION -> TERM plus EXPRESSION | TERM minus EXPRESSION | TERM             ; 表达式
TERM -> TERM_BIT times TERM | TERM_BIT divide TERM | TERM_BIT                 ; 项
TERM_BIT -> FACTOR BIT_OP_T TERM_BIT | FACTOR                                 ; 位运算项
FACTOR ->  BIT_OP_O identifier | BIT_OP_O ARRAY_ITEM |                        ; 因子
          identifier | ARRAY_ITEM | NUMBER |
          FUNCTION_CALL | lparen EXPRESSION rparen
DEC_ARRAY_ITEM -> identifier lbracket number rbracket                         ; 声明数组项
ARRAY_ITEM -> identifier lbracket VALUE_ITEM rbracket                         ; 数组项
FUNCTION_CALL -> identifier lparen GROUP_ITEM rparen |                        ; 函数调用
                identifier lparen rparen
VALUE_ITEM -> EXPRESSION | CONSTANT                                           ; 值项
LINER_CODDITION -> logical_not LINER_CODDITION |                              ; 线性条件
                  CONDITION logical_and LINER_CODDITION |
                  CONDITION logical_or LINER_CODDITION |
                  CONDITION
CONDITION -> VALUE_ITEM lt VALUE_ITEM | VALUE_ITEM le VALUE_ITEM |            ; 条件
             VALUE_ITEM gt VALUE_ITEM | VALUE_ITEM ge VALUE_ITEM |
             VALUE_ITEM eq VALUE_ITEM | VALUE_ITEM neq VALUE_ITEM |
             VALUE_ITEM
BLOCK -> lbrace INNER_SUB_PROGRAM rbrace                                      ; 代码块
FUNCTION_STMT -> TYPE identifier lparen PARAMETER rparen BLOCK |              ; 函数声明语句
                TYPE identifier lparen rparen BLOCK
PARAMETER -> TYPE identifier comma PARAMETER | TYPE identifier                ; 参数
RETURN_STMT -> return VALUE_ITEM semicolon | return semicolon                 ; 返回语句

HEADER_STMT -> include lt header gt                                           ; 头文件语句
CONSTANT -> string | character                                                ; 常量
TYPE -> int | float | double | char | void                                    ; 数据类型
NUMBER -> number | minus number                                               ; 数字
BIT_OP_O -> bitwise_and | bitwise_not                                         ; 位运算符（一元）
BIT_OP_T -> bitwise_and | bitwise_or | bitwise_xor                            ; 位运算符（二元）

[终结符]
semicolon        ; 分号 (';')
lparen           ; 左圆括号 ('(')
rparen           ; 右圆括号 (')')
lbrace           ; 左大括号 ('{')
rbrace           ; 右大括号 ('}')
lt               ; 小于号 ('<')
gt               ; 大于号 ('>')
le               ; 小于等于号 ('<=')
ge               ; 大于等于号 ('>=')
eq               ; 等于号 ('==')
neq              ; 不等于号 ('!=')
plus             ; 加号 ('+')
minus            ; 减号 ('-')
times            ; 乘号 ('*')
divide           ; 除号 ('/')
assign           ; 赋值号 ('=')
comma            ; 逗号 (',')
logical_and      ; 逻辑与 ('&&')
logical_or       ; 逻辑或 ('||')
logical_not      ; 逻辑非 ('!')
bitwise_and      ; 位与 ('&')
bitwise_or       ; 位或 ('|')
bitwise_xor      ; 位异或 ('^')
bitwise_not      ; 位非 ('~')
if               ; 如果 ('if')
else             ; 否则 ('else')
while            ; 当 ('while')
for              ; 循环 ('for')
define           ; 定义 ('#define')
include          ; 包含 ('#include')
return           ; 返回 ('return')
continue         ; 继续 ('continue')
break            ; 中断 ('break')
int              ; 整型 ('int')
float            ; 浮点型 ('float')
double           ; 双精度浮点型 ('double')
char             ; 字符型 ('char')
void             ; 空类型 ('void')
string           ; 字符串 ('".*"', type = regex)
character        ; 字符 ("'\\?.'", type = regex)
number           ; 数字 ('[0-9]+(\.[0-9]+)?', type = regex)
minus            ; 负号 ('-')
identifier       ; 标识符 ('[a-zA-Z_][a-zA-Z0-9_]*', type = regex)

[非终结符]
PROGRAM
OUTER_SUB_PROGRAM
OUTER_STMT
INNER_SUB_PROGRAM
INNER_STMT
IF_STMT
RESULT
DEFINE_STMT
WHILE_STMT
FOR_STMT
FOR_INIT
FOR_CONDITION
FOR_ASSIGN
ASSIGN_STMT
DECLARE_STMT
GROUP_ITEM
EXPRESSION
TERM
TERM_BIT
FACTOR
ARRAY_ITEM
FUNCTION_CALL
VALUE_ITEM
LINER_CODDITION
CONDITION
BLOCK
FUNCTION_STMT
PARAMETER
RETURN_STMT
HEADER_STMT
CONSTANT
TYPE
NUMBER
DEC_ARRAY_ITEM
BIT_OP_O
BIT_OP_T
